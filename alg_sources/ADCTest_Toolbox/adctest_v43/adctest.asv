function adctest
% @fn adctest
% @brief Main function of the ADC Test 4.0. Implements the Main Window of
%        the GUI and the callbacks
% @param none
% @return none
% @author Tamás Virosztek, Budapest University of Technology and Economics,
%         Department of Measurement and Information Systems,
%         Virosztek.Tamas@mit.bme.hu

%Looking for multiple versions of adctest on path
adctest_on_path = which('adctest','-all');
if (max(size(adctest_on_path)) > 1)
    wdlg = warndlg({'Found multiple versions of ADCTest toolbox on MATLAB path.';...
             'Please check you are running the latest version.'},...
             'Multiple versions of ADCTest toolbox on path');
    uiwait(wdlg);
end

clc;
screensize = get(0,'ScreenSize');

main_window = figure('Visible','on',...
                     'Position', [screensize(3)*0.25 screensize(4)*0.25 screensize(3)*0.5 screensize(4)*0.5]',...
                     'Name','ADCTest Main Window',...
                     'NumberTitle','off');

hFrameDesciptorSelector = uicontrol('Style','frame',...
                                    'Units','normalized',...
                                    'Position',[0.05 0.85 0.7 0.1],...
                                    'BackgroundColor',[0.8 0.8 0.8]);
                                
hTextFrameDescriptorSelector = uicontrol ('Style','text',...
                                         'Units','normalized',...
                                         'Position',[0.3 0.93 0.2 0.04],...
                                         'backgroundColor',[0.8 0.8 0.8],...
                                         'String','Descriptor selector');

hFrameMeasuerementInformation = uicontrol ('Style','frame',...
                                      'Units','normalized',...
                                      'Position',[0.05 0.3 0.7 0.5],...
                                      'BackgroundColor',[0.8 0.8 0.8]);

hTextFrameMeasurementInformation = uicontrol ('Style','text',...
                                         'Units','normalized',...
                                         'Position',[0.3 0.78 0.2 0.04],...
                                         'BackgroundColor',[0.8 0.8 0.8],...
                                         'String','Measuerement information');

hFrameProcessPossibilities = uicontrol ('Style','frame',...
                                       'Units','normalized',...
                                       'Position',[0.05 0.1 0.7 0.15],...
                                       'BackgroundColor',[0.8 0.8 0.8]);

hTextFrameProcessingPossibilities = uicontrol('Style','tex',...
                                           'Units','normalized',...
                                           'Position',[0.3 0.23 0.2 0.04],...
                                           'BackgroundColor',[0.8 0.8 0.8],...
                                           'String','Processing possibilities');

hFrameOptions = uicontrol('Style','frame',...
                          'Units','normalized',...
                          'Position',[0.8 0.1 0.15 0.85],...
                          'BackgroundColor',[0.8 0.8 0.8]);

hTextFrameOptions = uicontrol('Style','text',...
                              'Units','normalized',...
                              'Position',[ 0.83 0.93 0.09 0.04],...
                              'BackgroundColor',[0.8 0.8 0.8],...
                              'String','Options');
                          

hTextMeasInfoComment = uicontrol('Style','text',...
                                 'Units','normalized',...
                                 'Position',[0.3 0.71 0.2 0.04],...
                                 'BackgroundColor',[0.8 0.8 0.8],...
                                 'String','Description: ');
                             
hEditMeasInfoComment = uicontrol ('Style','edit',...
                                  'Units','normalized',...
                                  'Position',[0.07 0.41 0.66 0.3],...
                                  'Min',1,...
                                  'Max',100,...
                                  'String','',...
                                  'HorizontalAlignment','left');

hTextMeasInfoModel = uicontrol('Style','text',...
                               'Units','normalized',...
                               'Position',[0.07 0.36 0.1 0.04],...
                               'BackgroundColor',[0.8 0.8 0.8],...
                               'String','Model: ',...
                               'HorizontalAlignment','left');                       

hTextMeasInfoSerial = uicontrol('Style','text',...
                                'Units','normalized',...
                                'Position',[0.07 0.31 0.1 0.04],...
                                'BackgroundColor',[0.8 0.8 0.8],...
                                'String','Serial #: ',...
                                'HorizontalAlignment','left');                       

hTextMeasInfoChannel = uicontrol('Style','text',...
                                'Units','normalized',...
                                'Position',[0.45 0.36 0.1 0.04],...
                                'BackgroundColor',[0.8 0.8 0.8],...
                                'String','Channel #: ',...
                                'HorizontalAlignment','left');                       

hTextMeasInfoNoB = uicontrol('Style','text',...
                             'Units','normalized',...
                             'Position',[0.45 0.31 0.1 0.04],...
                             'BackgroundColor',[0.8 0.8 0.8],...
                             'String','Bits: ',...
                             'HorizontalAlignment','left');                       
                            
hTextMeasInfoModelValue = uicontrol('Style','text',...
                                    'Units','normalized',...
                                    'Position',[0.2 0.36 0.15 0.04],...
                                    'BackgroundColor','white',...
                                    'String','',...
                                    'HorizontalAlignment','right');                       
                            
hTextMeasInfoSerialValue = uicontrol('Style','text',...
                                    'Units','normalized',...
                                    'Position',[0.2 0.31 0.15 0.04],...
                                    'BackgroundColor','white',...
                                    'String','',...
                                    'HorizontalAlignment','right');                       

hTextMeasInfoChannelValue = uicontrol('Style','text',...
                                    'Units','normalized',...
                                    'Position',[0.58 0.36 0.15 0.04],...
                                    'BackgroundColor','white',...
                                    'String','',...
                                    'HorizontalAlignment','right');                       

hTextMeasInfoNoBValue = uicontrol('Style','text',...
                                    'Units','normalized',...
                                    'Position',[0.58 0.31 0.15 0.04],...
                                    'BackgroundColor','white',...
                                    'String','',...
                                    'HorizontalAlignment','right');                       

hPushButtonQuit = uicontrol('Style','pushbutton',...
                            'String','Quit',...
                            'Units','normalized',...
                            'Position',[0.81 0.84 0.13 0.08],...
                            'Callback',@Quit_callback);   

hPushButtonImport = uicontrol('Style','pushbutton',...
                              'String','Import',...
                              'Units','normalized',...
                              'Position',[0.81 0.72 0.13 0.08],...
                              'Callback',@Import_callback);   
                        
hPushButtonExport = uicontrol('Style','pushbutton',...
                              'String','Export',...
                              'Units','normalized',...
                              'Position',[0.81 0.62 0.13 0.08],...
                              'Callback',@Export_callback);   
                          
hPushButtonLoad = uicontrol('Style','pushbutton',...
                            'String','Load',...
                            'Units','normalized',...
                            'Position',[0.81 0.52 0.13 0.08],...
                            'Callback',@Load_callback);
                        
hPushButtonSave = uicontrol('Style','pushbutton',...
                            'String','Save',...
                            'Units','normalized',...
                            'Position',[0.81 0.42 0.13 0.08],...
                            'Callback',@Save_callback);
                        
hPushButtonDelete = uicontrol('Style','pushbutton',...
                              'String','Delete',...
                              'Units','normalized',...
                              'Position',[0.81 0.32 0.13 0.08],...
                              'Callback',@Delete_callback);
                          
hPushButtonNew = uicontrol('Style','pushbutton',...
                           'String','New',...
                           'Units','normalized',...
                           'Position',[0.81 0.22 0.13 0.08],...
                           'Callback',@New_callback);
                       
hPushButtonEdit = uicontrol('Style','pushbutton',...
                           'String','Edit',...
                           'Enable','off',...
                           'Units','normalized',...
                           'Position',[0.81 0.12 0.13 0.08],...
                           'Callback',@Edit_callback);

hPushButtonClassifyAndProcess = ('Style','pushbutton',...
                                'String','Classify and process measurement record',...
                                'Units','normalized',...
                                'Position',[0.07 0.12 0.15 0.1],...
                                'Callback',@ClassifyAndProcess_callback);
                                
% hPushButtonLS4p = uicontrol('Style','pushbutton',...
%                                 'String','LS fit',...
%                                 'Units','normalized',...
%                                 'Position',[0.07 0.12 0.15 0.1],...
%                                 'Callback',@ProcessLS4p_callback);                       
%                           
% hPushButtonMLFit = uicontrol('Style','pushbutton',...
%                              'String','ML fit',...
%                              'Units','normalized',...
%                              'Position',[0.24 0.12 0.15 0.1],...
%                              'Callback',@ProcessMLFit_callback);
% 
% hPushButtonHistogramTest = uicontrol('Style','pushbutton',...
%                                      'String','Histogram test',...
%                                      'Units','normalized',...
%                                      'Position',[0.41 0.12 0.15 0.1],...
%                                      'Callback',@ProcessHistogramTest_callback);
%                                  
% hPushButtonFFTTest = uicontrol('Style','pushbutton',...
%                                      'String','FFT test',...
%                                      'Units','normalized',...
%                                      'Position',[0.58 0.12 0.15 0.1],...
%                                      'Callback',@ProcessFFTTest_callback);
                                 
                         
hDescriptorSelector = uicontrol('Style','popup',...
                         'String',{'No descriptor loaded'},...
                         'Units','normalized',...
                         'Position',[0.1 0.82 0.6 0.1],...
                         'Callback',@DescriptorSelector_callback);          

hTextInfo = uicontrol('Style','text',...
                      'String','Initialized',...
                      'Units','normalized',...
                      'Position',[0 0.00 1 0.05],...
                      'BackgroundColor','green');
                  
%Defining HELP menu
hMenuADCTestHelp = uimenu(main_window,'Label','ADCTest Help');
uimenu(hMenuADCTestHelp,'Label','Getting started','Callback',@HelpGettingStarted_callback);
uimenu(hMenuADCTestHelp,'Label','User''s manual (PDF)','Callback',@HelpUsersManual_callback);
uimenu(hMenuADCTestHelp,'Label','About','Callback',@HelpAbout_callback);

descriptors = cell(0);
index = 0;
UpdateDisplay;

    function HelpGettingStarted_callback(source,eventdata)
        helpdlg({'To get familiar with the toolbox: ';...
                 '- Load an example measurement descriptor using the pushbutton "Load".';...
                 '- Process it via LS fit, ML fit, histogram test, or FFT test using the pushbuttons "LS fit", "ML fit", "Histogram test" and "FFT test" respectively.';...
                 '';...
                 'You can also';...
                 '- Create a new measurement descriptor using the pushbutton "New", and import measurement results from workspace.';...
                 '- Create a new measurement descriptor using the pushbutton "New", and assemble a simulated measurement.';...
                 '- Edit existing descriptors using the "Edit" pushutton.';...
                 '- Save descriptors to XML files using the "Save" pushbutton.';...
                 '- Import entire measurement descriptors from workspace using the "Import" pushbutton.';...
                 '- Export entire measurement descriptors to workspace using the "Export" pushbutton.'},...                 
                 'Getting started with ADCTest toolbox');
    end

    function HelpUsersManual_callback(source,eventdata)
        pdf_location = fullfile(fileparts(which('adctest.m')),'usersman','usersman.pdf');
        open(pdf_location);
    end

    function HelpAbout_callback(source,eventdata)
        helpdlg({'ADC Test Data Evaluation program for MATLAB';...
                '';...
                'Version 4.1';...
                '';...
                'Budapest University of Technology and Economics';...
                '';...                
                'Department of Measurement and Information Systems';...
                '';...                
                'http://www.mit.bme.hu/projects/adctest';...
                '';...                
                'Virosztek.Tamas@mit.bme.hu'},...
                'About ADCTest toolbox');
    end

    function Import_callback(source,eventdata)
        wsp_variable = inputdlg('Enter workspace variable name','Import',1,{'descriptors'});
        if (~isempty(wsp_variable{1}))
            try
                descriptors = evalin('base',wsp_variable{1});
                index = length(descriptors);
                UpdateDisplay;
            catch
                set(hTextInfo,'String','Given variable is missing');
                set(hTextInfo,'BackgroundColor','Red');                
            end
            set(hTextInfo,'String','Descriptors have been imported successfully');
            set(hTextInfo,'BackgroundColor','Green');
        else
            set(hTextInfo,'String','No variable given');
            set(hTextInfo,'BackgroundColor','Red');            
        end
    end

    function Export_callback(source,eventdata)
        wsp_variable = inputdlg('Enter workspace variable name','Export',1,{'descriptors'});
        if (~isempty(wsp_variable{1}))
            try
                assignin ('base',wsp_variable{1},descriptors);
            catch
                set(hTextInfo,'String','Given variable is missing');
                set(hTextInfo,'BackgroundColor','Red');                
            end
            set(hTextInfo,'String','Descriptors have been exported successfully');
            set(hTextInfo,'BackgroundColor','Green');
        else
            set(hTextInfo,'String','No variable given');
            set(hTextInfo,'BackgroundColor','Red');
        end
    end

    function Load_callback(source,eventdata)
        set(hTextInfo,'String','Loading descriptor...');
        set(hTextInfo,'BackgroundColor','Green');
        dscpath = fullfile(fileparts(which('adctest.m')),'examples');
        [filename,path] = uigetfile([dscpath,filesep,'.xml'],'Select Descriptor');
        if (ischar(filename) && ischar(path))
            [new_dsc,success,error_msg,warnings] = LoadDscFromXML(fullfile(path,filename));
            if (success)
                oldlength = length(descriptors);
                descriptors{oldlength+1,1} = new_dsc;
                index = length(descriptors);
                UpdateDisplay;
                if (max(size(warnings)) > 1)
                    DisplayWarnings(warnings);
                end
                set(hTextInfo,'String','Descriptor has been loaded successfully');
                set(hTextInfo,'BackgroundColor','Green');
            else
                set(hTextInfo,'String',strcat('Unable to import XML: ',error_msg));
                set(hTextInfo,'BackgroundColor','Red');
            end
        else
            set(hTextInfo,'String','Loading descriptor has been cancelled');
            set(hTextInfo,'BackgroundColor','Yellow');
        end     
    end

    function Save_callback(source,eventdata)
        set(hTextInfo,'String','Saving descriptor...');
        set(hTextInfo,'BackgroundColor','Green');
        [filename,path] = uiputfile(sprintf('%s.xml',descriptors{index}.name),'Save descriptor');
        if (ischar(filename) && ischar(path))
            [success,error_msg] = SaveDscToXML(descriptors{index},fullfile(path,filename));
            if (success)
                set(hTextInfo,'String','Descriptor has been saved successfully');
                set(hTextInfo,'BackgroundColor','Green');                
            else
                set(hTextInfo,'String',strcat('Unable to save descriptor: ',error_msg));
                set(hTextInfo,'BackgroundColor','Red');                
            end
        else
            set(hTextInfo,'String','Saving descriptor has been cancelled');
            set(hTextInfo,'BackgroundColor','Yellow');            
        end
    end

    function Delete_callback(source,eventdata)
        oldlength = length(descriptors);
        oldname = descriptors{index}.name;
        temp_dscs = cell(oldlength-1,1);
        for k = 1:index-1
            temp_dscs{k} = descriptors{k};
        end
        for k = index:oldlength-1
            temp_dscs{k} = descriptors{k+1};
        end
        descriptors = temp_dscs;
        if (index > length(descriptors))
            index = length(descriptors);
        end
        UpdateDisplay;
        set(hTextInfo,'String',sprintf('Descriptor "%s" has been deleted',oldname));
        set(hTextInfo,'BackgroundColor','Green');
    end

    function New_callback(source,eventdata)
        oldlength = length(descriptors);
        [new_dsc,success] = CreateNewDsc;
        if (success)
            descriptors{oldlength+1,1} = new_dsc;
            index = length(descriptors);
            UpdateDisplay;
            set(hTextInfo,'String','New descriptor has been added successfully');
            set(hTextInfo,'BackgroundColor','Green');
        else
            set(hTextInfo,'String','Adding new descriptor has been cancelled');
            set(hTextInfo,'BackgroundColor','Yellow');
        end
    end

    function Edit_callback(source,eventdata)
        [temp_dsc,success] = EditDsc(descriptors{index});
        if (success)
            descriptors{index} = temp_dsc;
            UpdateDisplay;
            set(hTextInfo,'String','Descriptor has been edited succesfully');
            set(hTextInfo,'BackgroundColor','Green');
        else
            set(hTextInfo,'String','Editing descriptor has been cancelled')
            set(hTextInfo,'BackgroundColor','Yellow');
        end
    end
    
    function Quit_callback(source,eventdata)
        confirm_reply = questdlg('Are you sure you want to quit?','','Yes','No','No');
        if strcmpi('Yes',confirm_reply)
            close(main_window);
        end
    end

    function ClassifyAndProcess_callback
        info_line_string = get(hTextInfo,'String');
        set(hTextInfo,'String','Processing descriptor for LS fit...');
        set(hTextInfo,'BackgroundColor','Green');                
        step_1(descriptors{index});
        set(hTextInfo,'String',info_line_string);
        set(hTextInfo,'BackgroundColor','Green');                        
        
    end

    function ProcessLS4p_callback(source,eventdata)
        info_line_string = get(hTextInfo,'String');
        set(hTextInfo,'String','Processing descriptor for LS fit...');
        set(hTextInfo,'BackgroundColor','Green');                
        ProcessDscLS4pFit(descriptors{index},'LS4p_only');
        set(hTextInfo,'String',info_line_string);
        set(hTextInfo,'BackgroundColor','Green');                        
    end

    function ProcessMLFit_callback(source,eventdata)
        info_line_string = get(hTextInfo,'String');
        set(hTextInfo,'String','Processing descriptor for ML fit...');
        set(hTextInfo,'BackgroundColor','Green');        
        ProcessDscLS4pFit(descriptors{index},'ML_fit');
        set(hTextInfo,'String',info_line_string);
        set(hTextInfo,'BackgroundColor','Green');                
    end

    function ProcessHistogramTest_callback(source,eventdata)
        info_line_string = get(hTextInfo,'String');
        set(hTextInfo,'String','Processing histogram test...');
        set(hTextInfo,'BackgroundColor','Green');
        %Setting windows to be displayed
        display_settings.results_win = 1;
        display_settings.summary_win = 1;
        display_settings.warning_dialog = 1;        
        ProcessHistogramTest(descriptors{index},display_settings);
        set(hTextInfo,'String',info_line_string);
        set(hTextInfo,'BackgroundColor','Green');        
    end

    function ProcessFFTTest_callback(source,eventdata)
        info_line_string = get(hTextInfo,'String');
        set(hTextInfo,'String','Processing FFT test...');
        set(hTextInfo,'BackgroundColor','Green');        
        ProcessFFTTest(descriptors{index});
        set(hTextInfo,'String',info_line_string);
        set(hTextInfo,'BackgroundColor','Green');                
    end
        
    function DescriptorSelector_callback(source,eventdata)
        index = get(source,'Value');
        set(hTextInfo,'String',sprintf('Descriptor "%s" has been selected',descriptors{index}.name));
        set(hTextInfo,'BackgroundColor','Green');
        UpdateDisplay;
    end

    function UpdateDisplay
        if ~(isempty(descriptors))
            names = cell(length(descriptors),1);
            for k = 1:length(descriptors)
                names{k} = descriptors{k}.name;
            end
            set(hDescriptorSelector,'String',names);
            set(hDescriptorSelector,'Value',index);
            set(hPushButtonEdit,'Enable','on');
            set(hPushButtonSave,'Enable','on');
            set(hPushButtonDelete,'Enable','on');
            set(hTextMeasInfoModelValue,'String',descriptors{index}.model);            
            set(hTextMeasInfoSerialValue,'String',descriptors{index}.serial);
            set(hTextMeasInfoChannelValue,'String',sprintf('%d',descriptors{index}.channel));
            set(hTextMeasInfoNoBValue,'String',sprintf('%d',descriptors{index}.NoB));
            set(hEditMeasInfoComment,'String',descriptors{index}.comment);
            set(hPushButtonLS4p,'Enable','on');
            set(hPushButtonMLFit,'Enable','on');
            set(hPushButtonHistogramTest,'Enable','on');
            set(hPushButtonFFTTest,'Enable','on');
        else
            set(hDescriptorSelector,'String',{'No descriptor loaded'});
            set(hDescriptorSelector,'Value',1);
            set(hPushButtonEdit,'Enable','off');
            set(hPushButtonSave,'Enable','off');
            set(hPushButtonDelete,'Enable','off');
            set(hTextMeasInfoModelValue,'String','');
            set(hTextMeasInfoSerialValue,'String','');
            set(hTextMeasInfoChannelValue,'String','');            
            set(hTextMeasInfoNoBValue,'String','');
            set(hEditMeasInfoComment,'String',{'No descriptor loaded yet. Please load or create one.'});
            set(hPushButtonLS4p,'Enable','off');
            set(hPushButtonMLFit,'Enable','off');
            set(hPushButtonHistogramTest,'Enable','off');
            set(hPushButtonFFTTest,'Enable','off');
        end
    end

end
