function ExportResultsToHTML(results,filename)
file_out = fopen (filename,'wt');
fprintf(file_out,'<html>\n');
fprintf(file_out,'<head>\n');
fprintf(file_out,'<title>\n');
fprintf(file_out,'ADCTest Toolbox - Measurement Evaluation Results\n');
fprintf(file_out,'</title>\n');
fprintf(file_out,'<style>\n');
fprintf(file_out,'	body {background-color:lightgrey}\n');
fprintf(file_out,'	p {color:black}\n');
fprintf(file_out,'</style>\n');
fprintf(file_out,'</head>\n');
fprintf(file_out,'<body>\n');
fprintf(file_out,'<center>\n');
fprintf(file_out,'<h1>Measurement Evaluation Results</h1>\n');
fprintf(file_out,'<h3>generated by <a href = "http://www.mit.bme.hu/projects/adctest" target = newpage>ADCTest toolbox v4.2</a> on %s</h3>\n',date);
fprintf(file_out,'</center>\n');


fprintf(file_out,'<h2>Device Under Test</h2>\n');
fprintf(file_out,'<table border = "1">\n');
fprintf(file_out,'	<col width = "200">\n');
fprintf(file_out,'	<col width = "100">\n');
if isfield(results,'DUT')
    fprintf(file_out,'		<tr><td>Model: </td><td><p align = "right"><b>%s</b></p></td></tr>\n',results.DUT.model);
    fprintf(file_out,'		<tr><td>Serial number: </td><td><p align = "right"><b>%s</b></p></td></tr>\n',results.DUT.serial);
    fprintf(file_out,'		<tr><td>Channel: </td><td><p align = "right"><b>%d</b></p></td></tr>\n',results.DUT.channel);
    fprintf(file_out,'		<tr><td>Number of bits: </td><td><p align = "right"><b>%d</b></p></td></tr>\n',results.DUT.NoB);
else
    fprintf(file_out,'		<tr><td>Model: </td><td><p align = "right"><b>N/A</b></p></td></tr>\n');
    fprintf(file_out,'		<tr><td>Serial number: </td><td><p align = "right"><b>N/A</b></p></td></tr>\n');
    fprintf(file_out,'		<tr><td>Channel: </td><td><p align = "right"><b>N/A</b></p></td></tr>\n');
    fprintf(file_out,'		<tr><td>Number of bits: </td><td><p align = "right"><b>N/A</b></p></td></tr>\n');
end
fprintf(file_out,'</table>\n');
fprintf(file_out,'<p></p>\n');
fprintf(file_out,'<hr>\n');
fprintf(file_out,'<h2>Evaluation results</h2>\n');
fprintf(file_out,'<ul>\n');
fprintf(file_out,'	<li>\n');
fprintf(file_out,'	<h3>Sine wave fit in time domain</h3>\n');
fprintf(file_out,'	<table border = "1">\n');
fprintf(file_out,'		<col width = "300">\n');
fprintf(file_out,'		<col width = "125">\n');
fprintf(file_out,'		<col width = "125">\n');
fprintf(file_out,'		<tr><th>Dynamic property</th><th>Using LS fit</th><th>Using ML fit</th></tr>\n');
if isfield(results,'LS') && isfield (results,'ML')
    fprintf(file_out,'		<tr><td>Effective Number of Bits (ENOB): </td><td><p align = "right"><b>%2.2f</b></p></td><td><p align = "right"><b>%2.2f</b></p></td></tr>\n',results.LS.ENOB,results.ML.ENOB);
    fprintf(file_out,'		<tr><td>Signal to Noise and Distortion Ratio (SINAD): </td><td><p align = "right"><b>%2.2f dB</b></p></td><td><p align = "right"><b>%2.2f dB</b></p></td></tr>\n',results.LS.SINAD,results.ML.SINAD);
elseif isfield(results,'LS') && ~isfield(results,'ML')
    fprintf(file_out,'		<tr><td>Effective Number of Bits (ENOB): </td><td><p align = "right"><b>%2.2f</b></p></td><td><p align = "right"><b>N/A</b></p></td></tr>\n',results.LS.ENOB);
    fprintf(file_out,'		<tr><td>Signal to Noise and Distortion Ratio (SINAD): </td><td><p align = "right"><b>%2.2f dB</b></p></td><td><p align = "right"><b>N/A</b></p></td></tr>\n',results.LS.SINAD);
else
    fprintf(file_out,'		<tr><td>Effective Number of Bits (ENOB): </td><td><p align = "right"><b>N/A</b></p></td><td><p align = "right"><b>N/A</b></p></td></tr>\n');
    fprintf(file_out,'		<tr><td>Signal to Noise and Distortion Ratio (SINAD): </td><td><p align = "right"><b>N/A</b></p></td><td><p align = "right"><b>N/A</b></p></td></tr>\n');
end
fprintf(file_out,'	</table>\n');
fprintf(file_out,'	</li>\n');
fprintf(file_out,'	<li>\n');
fprintf(file_out,'	<h3>Frequency domain analysis (FFT test)</h3>\n');
fprintf(file_out,'	<table border = "1">\n');
fprintf(file_out,'		<col width = "450">\n');
fprintf(file_out,'		<col width = "100">\n');
fprintf(file_out,'		<tr><th>Property</th><th>Value</th></tr>\n');
if isfield(results,'FFT')
    fprintf(file_out,'		<tr><td>Spurious-Free Dynamic Range (SFRD) relative to carrier (dBc): </td><td><p align = "right"><b>%2.2f dB</b></p></td></tr>\n',results.FFT.SFDRdBc);
    fprintf(file_out,'		<tr><td>Spurious-Free Dynamic Range (SFRD) relative to the full scale (dBFS): </td><td><p align = "right"><b>%2.2f dB</b></p></td></tr>\n',results.FFT.SFDRdBFS);
else
    fprintf(file_out,'		<tr><td>Spurious-Free Dynamic Range (SFRD) relative to carrier (dBc): </td><td><p align = "right"><b>N/A</b></p></td></tr>\n');
    fprintf(file_out,'		<tr><td>Spurious-Free Dynamic Range (SFRD) relative to the full scale (dBFS): </td><td><p align = "right"><b>N/A</b></p></td></tr>\n');
end
fprintf(file_out,'	</table>\n');
fprintf(file_out,'	</li>\n');
fprintf(file_out,'	<li>\n');
fprintf(file_out,'	<h3>Estimation of static transfer characteristic (histogram test)</h3>\n');
fprintf(file_out,'	<table border = "1">\n');
fprintf(file_out,'		<col width = "300">\n');
fprintf(file_out,'		<col width = "125">\n');
fprintf(file_out,'		<col width = "125">\n');
fprintf(file_out,'		<tr><th>Property</th><th>Minimum [LSB]</th><th>Maximum [LSB]</th></tr>\n');
if isfield(results,'INL')
    fprintf(file_out,'		<tr><td>Integral nonlinearity (INL): </td><td><p align = "right"><b>%2.2f</b></p></td><td><p align = "right"><b>%2.2f</b></p></td></tr>\n',results.INL.min,results.INL.max);
else
    fprintf(file_out,'		<tr><td>Integral nonlinearity (INL): </td><td><p align = "right"><b>N/A</b></p></td><td><p align = "right"><b>N/A</b></p></td></tr>\n');
end
if isfield(results,'DNL')
    fprintf(file_out,'		<tr><td>Differential nonlinearity (DNL): </td><td><p align = "right"><b>%2.2f</b></p></td><td><p align = "right"><b>%2.2f</b></p></td></tr>\n',results.DNL.min,results.DNL.max);
else
    fprintf(file_out,'		<tr><td>Differential nonlinearity (DNL): </td><td><p align = "right"><b>N/A</b></p></td><td><p align = "right"><b>N/A</b></p></td></tr>\n');
end
fprintf(file_out,'	</table>\n');
fprintf(file_out,'	</li>\n');
fprintf(file_out,'</ul>\n');

fprintf(file_out,'</body>\n');
fprintf(file_out,'</html>\n');

fclose(file_out);
end