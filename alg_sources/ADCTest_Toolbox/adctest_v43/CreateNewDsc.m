function [new_dsc,success] = CreateNewDsc
% @fn CreateNewDsc
% @brief Function to create new measurement descriptors
% @param none
% @return new_dsc The descriptor created
% @return success is 1 if creating succeeded, 0 otherwise
% @author Tamás Virosztek, Budapest University of Technology and Economics,
%         Department of Measurement and Information Systems,
%         Virosztek.Tamas@mit.bme.hu

screensize = get(0,'ScreenSize');

add_new_dsc_window = figure('Visible','on',...
                            'Position', [screensize(3)*0.1 screensize(4)*0.1 screensize(3)*0.8 screensize(4)*0.8]',...
                            'Name','Add new descriptor',...
                            'NumberTitle','off');

hFrameGeneralInformation = uicontrol('Style','frame',...
                                    'Units','normalized',...
                                    'Position',[0.01 0.5 0.48 0.44],...
                                    'BackgroundColor',[0.8 0.8 0.8]);

hFrameMeasurementData = uicontrol('Style','frame',...
                                    'Units','normalized',...
                                    'Position',[0.51 0.5 0.48 0.44],...
                                    'BackgroundColor',[0.8 0.8 0.8]);
                                                                                               
hTextGeneralInformation = uicontrol('Style','text',...
                             'String','General information',...
                             'FontWeight','bold',...
                             'Units','normalized',...
                             'Position',[0.17 0.9 0.16 0.05],...
                             'BackgroundColor',[0.8 0.8 0.8]);

hTextName = uicontrol('Style','text',...
                      'String','Name: ',...
                      'Units','normalized',...
                      'Position',[0.05 0.85 0.1 0.04],...
                      'HorizontalAlignment','left',...
                      'BackgroundColor',[0.8 0.8 0.8]);

hEditName = uicontrol('Style','edit',...
                      'String','Edit name',...
                      'Units','normalized',...
                      'Position',[0.15 0.85 0.3 0.05],...
                      'Callback',@EditName_callback);

hTextComment = uicontrol('Style','text',...
                         'String','Comment: ',...
                         'Units','normalized',...
                         'Position',[0.05 0.75 0.1 0.08],...
                         'HorizontalAlignment','left',...                      
                         'BackgroundColor',[0.8 0.8 0.8]);
                 
hEditComment = uicontrol('Style','edit',...
                         'String','Edit comment',...
                         'Units','normalized',...
                         'Position',[0.15 0.75 0.3 0.1],...
                         'Min',1,...
                         'Max',5,...
                         'Callback',@EditComment_callback);

hTextModel = uicontrol('Style','text',...
                       'String','Model: ',...
                       'Units','normalized',...
                       'Position',[0.05 0.7 0.1 0.04],...
                       'HorizontalAlignment','left',...                      
                       'BackgroundColor',[0.8 0.8 0.8]);

hEditModel = uicontrol('Style','edit',...
                      'String','Edit model',...
                      'Units','normalized',...
                      'Position',[0.15 0.7 0.3 0.05],...
                      'Callback',@EditModel_callback);

hTextSerial = uicontrol('Style','text',...
                       'String','Serial Number: ',...
                       'Units','normalized',...
                       'Position',[0.05 0.65 0.1 0.04],...
                       'HorizontalAlignment','left',...                      
                       'BackgroundColor',[0.8 0.8 0.8]);

hEditSerial = uicontrol('Style','edit',...
                        'String','Edit serial number',...
                        'Units','normalized',...
                        'Position',[0.15 0.65 0.3 0.05],...
                        'Callback',@EditSerial_callback);

hTextChannel = uicontrol('Style','text',...
                         'String','Channel: ',...
                         'Units','normalized',...
                         'Position',[0.05 0.6 0.1 0.04],...
                         'HorizontalAlignment','left',...                      
                         'BackgroundColor',[0.8 0.8 0.8]);

hEditChannel = uicontrol('Style','edit',...
                        'String','Edit channel',...
                        'Units','normalized',...
                        'Position',[0.15 0.6 0.3 0.05],...
                        'Callback',@EditChannel_callback);

hTextNoB = uicontrol('Style','text',...
                     'String','Number of bits: ',...
                     'Units','normalized',...
                     'Position',[0.05 0.55 0.1 0.04],...
                     'HorizontalAlignment','left',...                      
                     'BackgroundColor',[0.8 0.8 0.8]);

hEditNoB = uicontrol('Style','edit',...
                        'String','Edit number of bits',...
                        'Units','normalized',...
                        'Position',[0.15 0.55 0.3 0.05],...
                        'Callback',@EditNoB_callback);
                    
hTextMeasurementData = uicontrol('Style','text',...
                                 'String','Measurement Data',...
                                 'FontWeight','bold',...
                                 'Units','normalized',...
                                 'Position',[0.67 0.9 0.16 0.05],...
                                 'BackgroundColor',[0.8 0.8 0.8]);
                             
hTextSelectSource = uicontrol('Style','text',...
                              'String','Source of data vector: ',...
                              'Units','normalized',...
                              'HorizontalAlignment','left',...
                              'Position',[0.55 0.85 0.15 0.05],...
                              'BackgroundColor',[0.8 0.8 0.8]);
                 
hPopupMenuSelectSource = uicontrol('Style','popupmenu',...
                                   'Units','normalized',...
                                   'Position',[0.7 0.87 0.25 0.04],...
                                   'String',{'Real measurement','Simulated measurement'},...
                                   'Callback',@SelectSource_callback);
                                            
hPushButtonImportMeasurementData = uicontrol('Style','pushbutton',...
                                  'String','Import measurement data',...
                                  'Units','normalized',...
                                  'Position',[0.7 0.8 0.25 0.05],...
                                  'Callback',@ImportMeasurementData_callback);

hPushButtonSimulateMeasurement = uicontrol('Style','pushbutton',...
                                  'String','Simulate measurement',...
                                  'Units','normalized',...
                                  'Position',[0.7 0.73 0.25 0.05],...
                                  'Callback',@SimulateMeasurement_callback);

hTextImportedMeasurementData =  uicontrol('Style','text',...
                                  'String','Imported measurement data',...
                                  'FontWeight','bold',...
                                  'Units','normalized',...
                                  'Position',[0.35 0.45 0.3 0.03],...
                                  'BackgroundColor',[0.8 0.8 0.8]);
                              
hAxesToPlotData = axes ('Position',[0.05 0.2 0.9 0.25]);
                    
hPushButtonOK = uicontrol('Style','pushbutton',...
                          'String','OK',...
                          'Units','normalized',...
                          'Position',[0.35 0.1 0.1 0.05],...
                          'Callback',@OK_callback);

hPushButtonCancel = uicontrol('Style','pushbutton',...
                              'String','Cancel',...
                              'Units','normalized',...
                              'Position',[0.55 0.1 0.1 0.05],...
                              'Callback',@Cancel_callback);
                          
hTextInfo = uicontrol('Style','text',...
                      'String','Edit new descriptor',...
                      'Units','normalized',...
                      'Position',[0 0.02 1 0.05],...
                      'BackgroundColor','Green');
                  
                          
%Assembling descriptor with default values
new_dsc.name ='Edit name';
new_dsc.comment = {'Edit comment';'Second line'};
new_dsc.model = 'Edit model';
new_dsc.serial = 'Edit serial';
new_dsc.channel = NaN;
new_dsc.NoB = NaN;
new_dsc.data = zeros(1);
new_dsc.simulation = 0;
new_dsc.parameters.A = NaN;
new_dsc.parameters.B = NaN;
new_dsc.parameters.C = NaN;
new_dsc.parameters.theta = NaN;
new_dsc.parameters.sigma = NaN;
new_dsc.parameters.INL = NaN;
% State variable: source of datavect (real measurement or simulated measurement):
source_of_datavect = 'real_measurement'; 
%The name of the workspece wariable containing the
%measurement data:
wsp_variable_name = '';
%Setting default return value of success:
success = 0;
UpdateDisplay;
uiwait(add_new_dsc_window); %Blocks execution (and return) until either OK or Cancel pushbutton pressed
%(until the window is closed in their callbacks).


    function EditName_callback(source,eventdata)
        new_dsc.name = get(source,'String');
    end

    function EditComment_callback(source,eventdata)
        new_dsc.comment = cellstr(get(source,'String'));
    end

    function EditModel_callback(source,eventdata)
        new_dsc.model = get(source,'String');
    end

    function EditSerial_callback(source,eventdata)
        new_dsc.serial = get(source,'String');
    end

    function EditChannel_callback(source,eventdata)
        new_dsc.channel = str2double(get(source,'String'));
    end

    function EditNoB_callback(source,eventdata)
        new_dsc.NoB = str2double(get(source,'String'));
    end

    function SelectSource_callback(source,eventdata)
        if (get(source,'Value') == 1) % Real measuerement
            source_of_datavect = 'real_measurement';
            UpdateDisplay;
        else %Simulated measurement            
            source_of_datavect = 'simulated_measurement';
            UpdateDisplay;
        end
    end

    function ImportMeasurementData_callback(source,eventdata)
        wsp_variable_name = inputdlg('Enter workspace variable name','Import',1,{'datavect'});
        if (~isempty(wsp_variable_name{1}))
            try
                new_dsc.data = evalin('base',wsp_variable_name{1});
                axes(hAxesToPlotData);
                plot(1:length(new_dsc.data),new_dsc.data);
                set(hTextInfo,'String','Measurement data has been imported succesfully');
                set(hTextInfo,'BackgroundColor','Green');
                new_dsc.simulation = 0;
            catch
                set(hTextInfo,'String','Given variable is missing');
                set(hTextInfo,'BackgroundColor','Red');
            end
        else
            set(hTextInfo,'String','No variable name given');
            set(hTextInfo,'BackgroundColor','Red');
        end
    end

    function SimulateMeasurement_callback(source,eventdata)
        [datavect,parameters,success] = SimulateMeasurement(new_dsc.NoB);
        if (success)
            new_dsc.data = datavect;
            new_dsc.parameters = parameters;
            new_dsc.NoB = parameters.NoB;
            axes(hAxesToPlotData);
            plot(1:length(new_dsc.data),new_dsc.data);
            UpdateDisplay;
            set(hTextInfo,'String','Simulated measurement performed successfully');
            set(hTextInfo,'BackgroundColor','Green');            
            new_dsc.simulation = 1;
        else
            set(hTextInfo,'String','Simulation cancelled');
            set(hTextInfo,'BackgroundColor','Yellow');            
        end
    end
      
    function OK_callback(source,eventdata)
        success = 1;
        close(add_new_dsc_window);
        return;
    end

    function Cancel_callback(source,eventdata)
        success = 0;
        close(add_new_dsc_window);
        return;
    end

    function UpdateDisplay
        set(hEditName,'String',new_dsc.name);
        set(hEditComment,'String',char(new_dsc.comment)); %char is inverse of cellstr in this case
        set(hEditModel,'String',new_dsc.model);        
        set(hEditSerial,'String',new_dsc.serial);
        set(hEditChannel,'String',sprintf('%d',new_dsc.channel));
        set(hEditNoB,'String',sprintf('%d',new_dsc.NoB));        
        if (strcmpi(source_of_datavect,'real_measurement'))
            set(hPushButtonImportMeasurementData,'Enable','on');
            set(hPushButtonSimulateMeasurement,'Enable','off');
        else
            set(hPushButtonImportMeasurementData,'Enable','off');
            set(hPushButtonSimulateMeasurement,'Enable','on');
        end
    end

 
end