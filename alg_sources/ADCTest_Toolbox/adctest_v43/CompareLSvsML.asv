function CompareLSvsML(dsc,reduced_data,timevect,LS_params,ML_params,estimated_INL)
% @fn CompareLSvsML
% @brief Compares the results of LS and ML fit, and displays the difference
%        in a comparative window
% @param dsc The processed measurement descriptor
% @param reduced_data The data vector after the adjustment of amplitude and
%                     time limits
% @param timevect Sampling times of the elements of reduced_data
% @param LS_params Results of LS estimation
% @param ML_params Results of ML estimation
% @param estimated_INL The INL estimated using histogram test
% @return none
% @author Tamás Virosztek, Budapest University of Technology and Economics,
%         Department of Measurement and Information Systems,
%         Virosztek.Tamas@mit.bme.hu

%'Macros:'
HISTOGRAM_DENSITY = 50;
SW_X_AXIS_DENSITY = 500;
%State variables:
domain = 'code'; %State of 'Mode selector': possible values: 'code' or 'signal_parameter'
plot1_state = 1;
plot2_state = 1; %

screen_size = get(0,'ScreenSize');
comparison_window = figure('Name','Comparison of ML and LS estimators',...
    'Position',[screen_size(3)*0.1 screen_size(4)*0.1 screen_size(3)*0.8 screen_size(4)*0.8],...
    'NumberTitle','off');

hFrameDivider  = uicontrol('Style','frame',...
    'Units','normalized',...
    'Position',[0.5 0 1e-3 1]);

hTextMLTitle = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.1 0.9 0.3 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','ML parameter estimation',...
    'FontWeight','bold');

hTextLSTitle = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.6 0.9 0.3 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','LS parameter estimation',...
    'FontWeight','bold');

hTextMLParameters = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.02 0.8 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Signal Parameter:',...
    'FontWeight','bold',...
    'HorizontalAlignment','left');

hTextMLValue = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.22 0.8 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Value',...
    'FontWeight','bold',...
    'HorizontalAlignment','right');

hTextMLUnit = uicontrol ('Style','text',...
    'Units','normalized',...
    'Position',[0.32 0.8 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Unit',...
    'FontWeight','bold',...
    'HorizontalAlignment','right');

hTextLSParameters = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.52 0.8 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Signal Parameter:',...
    'FontWeight','bold',...
    'HorizontalAlignment','left');

hTextLSValue = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.72 0.8 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Value',...
    'FontWeight','bold',...
    'HorizontalAlignment','right');

hTextLSUnit = uicontrol ('Style','text',...
    'Units','normalized',...
    'Position',[0.82 0.8 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Unit',...
    'FontWeight','bold',...
    'HorizontalAlignment','right');

%------------
%AMPLITUDE
%------------
hTextMLApmlitude = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.02 0.775 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Amplitude: ',...
    'HorizontalAlignment','left');

hTextMLAmplitudeValueLSB = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.22 0.775 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','234',...
    'HorizontalAlignment','right');

hTextMLAmplitudeUnitLSB = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.32 0.775 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','LSB',...
    'HorizontalAlignment','right');



hTextLSApmlitude = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.52 0.775 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Amplitude: ',...
    'HorizontalAlignment','left');

hTextLSAmplitudeValueLSB = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.72 0.775 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','',...
    'HorizontalAlignment','right');

hTextLSAmplitudeUnitLSB = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.82 0.775 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','LSB',...
    'HorizontalAlignment','right');
%------------
%DC
%------------

hTextMLDC = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.02 0.75 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','DC component: ',...
    'HorizontalAlignment','left');

hTextMLDCValueLSB = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.22 0.75 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','',...
    'HorizontalAlignment','right');

hTextMLDCUnitLSB = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.32 0.75 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','LSB',...
    'HorizontalAlignment','right');



hTextLSDC = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.52 0.75 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','DC component: ',...
    'HorizontalAlignment','left');

hTextLSDCValueLSB = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.72 0.75 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','234',...
    'HorizontalAlignment','right');

hTextLSDCUnitLSB = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.82 0.75 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','LSB',...
    'HorizontalAlignment','right');
%---------
%FREQUENCY
%---------

hTextMLFrequency = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.02 0.725 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Normalized frequency: ',...
    'HorizontalAlignment','left');

hTextMLFrequencyValue = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.22 0.725 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','234',...
    'HorizontalAlignment','right');

hTextMLFrequencyUnit = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.32 0.725 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','f/fs',...
    'HorizontalAlignment','right');

hTextLSFrequency = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.52 0.725 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Normalized frequency: ',...
    'HorizontalAlignment','left');

hTextLSFrequencyValue = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.72 0.725 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','234',...
    'HorizontalAlignment','right');

hTextLSFrequencyUnit = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.82 0.725 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','f/fs',...
    'HorizontalAlignment','right');


%-----------
%PHASE
%-----------

hTextMLPhase = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.02 0.7 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Initial phase: ',...
    'HorizontalAlignment','left');

hTextMLPhaseValue = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.22 0.7 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','',...
    'HorizontalAlignment','right');

hTextMLPhaseUnit = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.32 0.7 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','DEG',...
    'HorizontalAlignment','right');

hTextLSPhase = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.52 0.7 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Initial phase: ',...
    'HorizontalAlignment','left');

hTextLSPhaseValue = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.72 0.7 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','234',...
    'HorizontalAlignment','right');

hTextLSPhaseUnit = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.82 0.7 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','DEG',...
    'HorizontalAlignment','right');
%---------------
%AMPLITUDE NORM
%---------------

hTextMLAmpNorm = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.02 0.675 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Normalized amplitude: ',...
    'HorizontalAlignment','left');

hTextMLAmpNormValue = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.22 0.675 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','',...
    'HorizontalAlignment','right');

hTextMLAmpNormUnit = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.32 0.675 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','rel. FS',...
    'HorizontalAlignment','right');

hTextLSAmpNorm = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.52 0.675 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Normalized amplitude: ',...
    'HorizontalAlignment','left');

hTextLSAmpNormValue = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.72 0.675 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','',...
    'HorizontalAlignment','right');

hTextLSAmpNormUnit = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.82 0.675 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','rel. FS',...
    'HorizontalAlignment','right');


%---------------
%DC NORM
%---------------
hTextMLDCNorm = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.02 0.65 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Normalized DC component: ',...
    'HorizontalAlignment','left');

hTextMLDCNormValue = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.22 0.65 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','',...
    'HorizontalAlignment','right');

hTextMLDCNormUnit = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.32 0.65 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','rel. FS',...
    'HorizontalAlignment','right');

hTextLSDCNorm = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.52 0.65 0.2 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Normalized DC component: ',...
    'HorizontalAlignment','left');

hTextLSDCNormValue = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.72 0.65 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','',...
    'HorizontalAlignment','right');

hTextLSDCNormUnit = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.82 0.65 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','rel. FS',...
    'HorizontalAlignment','right');

%---------------
%ENOB
%----------------
hTextENOB_ML = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.15 0.1 0.15 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Effective Number of Bits: ',...
    'FontWeight','bold',...
    'HorizontalAlignment','left');

hTextENOBValue_ML = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.3 0.1 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','NaN',...
    'FontWeight','bold',...
    'HorizontalAlignment','right');

hTextENOB_LS = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.65 0.1 0.15 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Effective Number of Bits: ',...
    'FontWeight','bold',...
    'HorizontalAlignment','left');

hTextENOBValue_LS = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.8 0.1 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','NaN',...
    'FontWeight','bold',...
    'HorizontalAlignment','right');
%------------
%AXES
%------------

hAxesMLPlot1 = axes('Position',[0.02 0.45 0.46 0.15]);
hTextTitleMLPlot1 = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.2 0.6 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Residuals in linear time');


hAxesLSPlot1 = axes('Position',[0.52 0.45 0.46 0.15]);
hTextTitleLSPlot1 = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.7 0.6 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Residuals in linear time');

hPopupMenuPlot1Selector = uicontrol('Style','popupmenu',...
    'Units','normalized',...
    'Position',[0.38 0.6 0.1 0.04],...
    'String',{'Linear time','Mod T plot'},...
    'Callback',@Plot1Selector_callback);

hAxesMLPlot2 = axes ('Position',[0.02 0.2 0.46 0.15]);
hTextTitleMLPlot2 = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.2 0.35 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Histogram of residuals');


hAxesLSPlot2 = axes ('Position',[0.52 0.2 0.46 0.15]);
hTextTitleLSPlot2 = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.7 0.35 0.1 0.04],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String','Histogram of residuals');

hPopupMenuPlot2Selector = uicontrol('Style','popupmenu',...
    'Units','normalized',...
    'Position',[0.38 0.35 0.1 0.04],...
    'String',{'Histogram'},...
    'Callback',@Plot2Selector_callback);

% hPopupMenuDomainSelector = uicontrol('Style','popupmenu',...
%     'Units','normalized',...
%     'Position',[0.9 0.9 0.1 0.05],...
%     'String',{'Code domain','Signal domain'},...
%     'Callback',@DomainSelector_callback);



%------------------
%DISPLAYING RESULTS
%------------------

sine_wave_LS = LS_params(1)*cos(LS_params(4)*timevect) + LS_params(2)*sin(LS_params(4)*timevect) + LS_params(3);
residuals_LS = reduced_data(timevect) - sine_wave_LS;

%Converting ML parameters from [0,1] range to LSB
ML_DC_LSB = ML_params(3)*(2^dsc.NoB - 2) + 0.5; %0 -> 0.5; 1->2^NoB-1.5
ML_params_LSB = [ML_params(1:2)*(2^dsc.NoB-2); ML_DC_LSB; ML_params(4)];
sine_wave_ML = ML_params_LSB(1)*cos(ML_params_LSB(4)*timevect) + ML_params_LSB(2)*sin(ML_params_LSB(4)*timevect) + ML_params_LSB(3);
residuals_ML = reduced_data(timevect) - sine_wave_ML;

%Calculating extrema of residuals for axis values
max_axis_residuals = max([max([residuals_ML;residuals_LS]);abs(min([residuals_ML;residuals_LS]))]);
min_axis_residuals = (-1)*max_axis_residuals;

%Converting LS parameters from LSB to range[0,1]
LS_DC_NORM = (LS_params(3)-0.5)/(2^dsc.NoB - 2); % 0.5 - > 0; 2^NoB-1.5 ->1
LS_params_NORM = [LS_params(1:2)/(2^dsc.NoB - 2); LS_DC_NORM; LS_params(4)];

LS_ENOB = dsc.NoB - log2(rms(residuals_LS)*sqrt(12));
ML_ENOB = dsc.NoB - log2(rms(residuals_ML)*sqrt(12));
%Saturating ENOB to the theoretical bit number:
if (LS_ENOB > dsc.NoB)
    LS_ENOB = dsc.NoB;
end
if (ML_ENOB > dsc.NoB)
    ML_ENOB = dsc.NoB;
end

%Calculating Mod T plot
ML_TimeModT = zeros(length(residuals_ML),1);
LS_TimeModT = zeros(length(residuals_LS),1);
for k = 1:length(residuals_ML)
    ML_TimeModT(k) = timevect(k)*ML_params(4) - 2*pi*floor(timevect(k)*ML_params(4)/(2*pi));
end
for k = 1:length(residuals_LS)
    LS_TimeModT(k) = timevect(k)*LS_params(4) - 2*pi*floor(timevect(k)*LS_params(4)/(2*pi));
end
[ML_TimeModT_sorted,ML_TimeModT_indeces] = sort(ML_TimeModT);
[LS_TimeModT_sorted,LS_TimeModT_indeces] = sort(LS_TimeModT);
%Calculating reference sine wave for mod t plot
reference_sinewave_ML = (max_axis_residuals - min_axis_residuals)*0.4/sqrt(ML_params(1)^2 + ML_params(2)^2)*(ML_params(1)*cos(ML_TimeModT_sorted) + ML_params(2)*sin(ML_TimeModT_sorted));
reference_sinewave_LS = (max_axis_residuals - min_axis_residuals)*0.4/sqrt(ML_params(1)^2 + ML_params(2)^2)*(ML_params(1)*cos(ML_TimeModT_sorted) + ML_params(2)*sin(ML_TimeModT_sorted));

%Setting display:
axes(hAxesMLPlot1);
plot(timevect,residuals_ML);
axis([1,length(reduced_data),min_axis_residuals,max_axis_residuals]);
axes(hAxesLSPlot1);
plot(timevect,residuals_LS);
axis([1,length(reduced_data),min_axis_residuals,max_axis_residuals]);

hist_vect = linspace(min_axis_residuals,max_axis_residuals,HISTOGRAM_DENSITY);
ML_hist = hist(residuals_ML,hist_vect);
LS_hist = hist(residuals_LS,hist_vect);
axes(hAxesMLPlot2);
hist(residuals_ML,hist_vect);
axis([min_axis_residuals,max_axis_residuals, 0, max([ML_hist.';LS_hist.'])]);
axes(hAxesLSPlot2);
hist(residuals_LS,hist_vect);
axis([min_axis_residuals,max_axis_residuals,0,max([ML_hist.';LS_hist.'])]);


set(hTextMLAmplitudeValueLSB,'String',sprintf('%3.2f',sqrt(ML_params_LSB(1)^2 + ML_params_LSB(2)^2)));
set(hTextLSAmplitudeValueLSB,'String',sprintf('%3.2f',sqrt(LS_params(1)^2 + LS_params(2)^2)));

set(hTextMLDCValueLSB,'String',sprintf('%3.2f',ML_params_LSB(3)));
set(hTextLSDCValueLSB,'String',sprintf('%3.2f',LS_params(3)));

set(hTextMLFrequencyValue,'String',sprintf('%e',ML_params_LSB(4)/(2*pi)));
set(hTextLSFrequencyValue,'String',sprintf('%e',LS_params(4)/(2*pi)));

set(hTextMLPhaseValue,'String',sprintf('%3.2f',(-1)*180/pi*atan2(ML_params(2),ML_params(1))));
set(hTextLSPhaseValue,'String',sprintf('%3.2f',(-1)*180/pi*atan2(LS_params(2),LS_params(1))));

set(hTextMLAmpNormValue,'String',sprintf('%1.4f',sqrt(ML_params(1)^2 + ML_params(2)^2)));
set(hTextLSAmpNormValue,'String',sprintf('%1.4f',sqrt(LS_params_NORM(1)^2 + LS_params_NORM(2)^2)));

set(hTextMLDCNormValue,'String',sprintf('%1.4f',ML_params(3)));
set(hTextLSDCNormValue,'String',sprintf('%1.4f',LS_params_NORM(3)));

set(hTextENOBValue_LS,'String',sprintf('%2.2f',LS_ENOB));
set(hTextENOBValue_ML,'String',sprintf('%2.2f',ML_ENOB));

%%%%%%%%%Adding evaluation result to results cell array:
try
    testresults = evalin('base','adctest_process_results');
    res_len = size(testresults,1);
    %Search for existing results block
    existings_index = 0;
    for k = 1:res_len        
        if strcmpi(dsc.model,testresults{k,1}.DUT.model) ...
                && strcmpi(dsc.serial,testresults{k,1}.DUT.serial)...
                && (dsc.channel == testresults{k,1}.DUT.channel)...
                && (dsc.NoB == testresults{k,1}.DUT.NoB)
            existings_index = k;                    
        end
    end    
    if (existings_index ~= 0) %existing result struct
        %Adding new results:
        testresults{existing_index,1}.LS.SINAD = LS_SINAD;
        testresults{existing_index,1}.LS.ENOB = LS_ENOB;                        
        testresults{existing_index,1}.ML.SINAD = ML_SINAD;
        testresults{existing_index,1}.ML.ENOB = ML_ENOB;                
    else %new result struct shall be added
        testresults{res_len + 1,1}.DUT.model = dsc.model;
        testresults{res_len + 1,1}.DUT.serial = dsc.serial;
        testresults{res_len + 1,1}.DUT.channel = dsc.channel;
        testresults{res_len + 1,1}.DUT.NoB = dsc.NoB;
        %Adding new results:
        testresults{res_len + 1,1}.LS.SINAD = LS_SINAD;
        testresults{res_len + 1,1}.LS.ENOB = LS_ENOB;        
        testresults{res_len + 1,1}.ML.SINAD = ML_SINAD;
        testresults{res_len + 1,1}.ML.ENOB = ML_ENOB;                
    end
    %updating adctest_process_results
    assignin ('base','adctest_process_results',testresults);
        
catch
    %If testresults global variable does not exist:
    testresults = cell(1,1); %creating new cell array for testresults
    testresults{1,1}.DUT.model = dsc.model;
    testresults{1,1}.DUT.serial = dsc.serial;
    testresults{1,1}.DUT.channel = dsc.channel;
    testresults{1,1}.DUT.NoB = dsc.NoB;
    %Adding new results:
    testresults{1,1}.LS.SINAD = LS_SINAD;
    testresults{1,1}.LS.ENOB = 14.23;        
    testresults{1,1}.ML.SINAD = 87.32;
    testresults{1,1}.ML.ENOB = 14.23;        
    
    assignin ('base','adctest_process_results',testresults);
end
%%%%%%End of adding evaluatin results to cell array%%%%%%%%%%

    function Plot1Selector_callback(source,eventdata)
        plot1_state = get(source,'Value');
        UpdateDisplay;
    end

    function Plot2Selector_callback(source,eventdata)
        plot2_state = get(source,'Value');
        UpdateDisplay;
    end


    function UpdateDisplay
        if strcmpi(domain,'code') %Code domain
            set(hPopupMenuPlot1Selector,'String',{'Linear time','Mod T plot'});
            set(hPopupMenuPlot2Selector,'String',{'Histogram'});
            if (plot1_state == 1) %Residuals in linear time
                set(hTextTitleMLPlot1,'String','Residuals in linear time');
                set(hTextTitleLSPlot1,'String','Residuals in linear time');
                axes(hAxesMLPlot1);
                plot(timevect,residuals_ML);
                axis([1,length(reduced_data),min_axis_residuals,max_axis_residuals]);
                axes(hAxesLSPlot1);
                plot(timevect,residuals_LS);
                axis([1,length(reduced_data),min_axis_residuals,max_axis_residuals]);
            elseif (plot1_state == 2) %Mod T plot of residuals
                set(hTextTitleMLPlot1,'String','Mod T plot of residuals');
                axes(hAxesMLPlot1);
                plot(ML_TimeModT_sorted,residuals_ML(ML_TimeModT_indeces),'b.','MarkerSize',2); hold on;
                plot(ML_TimeModT_sorted,reference_sinewave_ML,'r'); hold off;
                axis([0,2*pi,min_axis_residuals,max_axis_residuals]);
                set(hTextTitleLSPlot1,'String','Mod T plot of residuals');
                axes(hAxesLSPlot1);
                plot(LS_TimeModT_sorted,residuals_LS(LS_TimeModT_indeces),'b.','MarkerSize',2); hold on;
                plot(ML_TimeModT_sorted,reference_sinewave_LS,'r'); hold off;
                axis([0,2*pi,min_axis_residuals,max_axis_residuals]);
            else
                error('plot1_state out of range');
            end

            if (plot2_state == 1)
                set(hTextTitleMLPlot2,'String','Histogram of residuals');
                set(hTextTitleLSPlot2,'String','Histogram of residuals');
                hist_vect = linspace(min_axis_residuals,max_axis_residuals,HISTOGRAM_DENSITY);
                ML_hist = hist(residuals_ML,hist_vect);
                LS_hist = hist(residuals_LS,hist_vect);
                axes(hAxesMLPlot2);
                hist(residuals_ML,hist_vect);
                axis([min_axis_residuals,max_axis_residuals,0,max([ML_hist.';LS_hist.'])]);
                axes(hAxesLSPlot2);
                hist(residuals_LS,hist_vect);
                axis([min_axis_residuals,max_axis_residuals,0,max([ML_hist.';LS_hist.'])]);
            else
                error ('plot2_state out of range');
            end
        else
            error ('domain out of range');
        end
    end

end