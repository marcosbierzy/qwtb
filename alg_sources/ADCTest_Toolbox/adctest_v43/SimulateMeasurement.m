function [datavect,parameters,success] = SimulateMeasurement(NoB)
% @fn SimulateMeesurement
% @brief Implements a graphical tool to perform simulated measurements
% @param NoB The number of bits of the ADC
% @return datavect The ADC codes "recorded" at the output of the simulated
%                  ADC
% @return parameters The parameters of the excitation signal and the ADC in
%                    the simulation
% @return succes is 1 if simulation succeeded, 0 otherwise
% @author Tamás Virosztek, Budapest University of Technology and Economics,
%         Department of Measurement and Information Systems,
%         Virosztek.Tamas@mit.bme.hu

    screen_size = get(0,'ScreenSize');
    simulate_measurement_window = figure('Name','Performing simulated measurement',...
                                         'Position',[screen_size(3)*0.2, screen_size(4)*0.2, screen_size(3)*0.6, screen_size(4)*0.6],...
                                         'NumberTitle','off');

    hTextNumberOfBits = uicontrol('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.1 0.9 0.15 0.04],...
                                     'String','Number of bits: ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);                                     
    hEditNumberOfBits = uicontrol('Style','edit',...
                                     'Units','normalized',...
                                     'Position',[0.25 0.9 0.15 0.04],...
                                     'String',sprintf('%d',NoB),...
                                     'HorizontalAlignment','right',...
                                     'Callback',@EditNumberOfBits_callback);
                                     
    hTextNumberOfSamples = uicontrol('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.1 0.8 0.15 0.04],...
                                     'String','Number of samples: ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);                                     
    hEditNumberOfSamples = uicontrol('Style','edit',...
                                     'Units','normalized',...
                                     'Position',[0.25 0.8 0.15 0.04],...
                                     'HorizontalAlignment','right',...
                                     'Callback',@EditNumberOfSamples_callback);
                                 

    hTextNumberOfPeriods = uicontrol('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.1 0.7 0.15 0.04],...
                                     'String','Number of periods: ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);                                     
    hEditNumberOfPeriods = uicontrol('Style','edit',...
                                     'Units','normalized',...
                                     'Position',[0.25 0.7 0.15 0.04],...
                                     'HorizontalAlignment','right',...
                                     'Callback',@EditNumberOfPeriods_callback);

    hTextAmpPhaseVsCosineSineSelector = uicontrol ('Style','text',...
                                                   'Units','normalized',...
                                                   'Position',[0.1 0.6 0.15 0.04],...
                                                   'String','Description method: ',...
                                                   'HorizontalAlignment','left',...
                                                   'BackgroundColor',[0.8 0.8 0.8]);                                     
                                                                                                                                       
    hPopupMenuAmpPhaseVsCosineSineSelector = uicontrol ('Style','popupmenu',...
                                                'Units','normalized',...
                                                'Position',[0.25 0.6 0.15 0.04],...
                                                'String',{'Cosine & Sine','Amplitude & Phase'},...
                                                'Callback',@AmpPhaseVsCosineSineSelector_callback);
                                            
    hTextCosineCoefficient = uicontrol('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.1 0.5 0.15 0.04],...
                                     'String','Cosine coefficient (A): ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);    
    hEditCosineCoefficient = uicontrol('Style','edit',...
                                     'Units','normalized',...
                                     'Position',[0.25 0.5 0.15 0.04],...
                                     'HorizontalAlignment','right',...
                                     'Callback',@EditCosineCoefficient_callback);
                                 
    hTextSineCoefficient = uicontrol('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.1 0.4 0.15 0.04],...
                                     'String','Sine coefficient (B): ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);    
    hEditSineCoefficient = uicontrol('Style','edit',...
                                     'Units','normalized',...
                                     'Position',[0.25 0.4 0.15 0.04],...
                                     'HorizontalAlignment','right',...
                                     'Callback',@EditSineCoefficient_callback);

    hTextDCComponent = uicontrol ('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.1 0.3 0.15 0.04],...
                                     'String','DC component: ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);    
    hEditDCComponent = uicontrol('Style','edit',...
                                     'Units','normalized',...
                                     'Position',[0.25 0.3 0.15 0.04],...
                                     'HorizontalAlignment','right',...
                                     'Callback',@EditDCComponent_callback);
                                                                  
    hTextStdOfNoise = uicontrol ('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.1 0.2 0.15 0.04],...
                                     'String','Std of noise: ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);    
    hEditStdOfNoise = uicontrol('Style','edit',...
                                     'Units','normalized',...
                                     'Position',[0.25 0.2 0.15 0.04],...
                                     'HorizontalAlignment','right',...
                                     'Callback',@EditStdOfNoise_callback);

    hTextINLSelectionMethod = uicontrol('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.6 0.9 0.15 0.04],...
                                     'String','Determination of INL: ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);
    hPopupMenuINLSelectionMethod = uicontrol('Style','popupmenu',...
                                         'Units','normalized',...
                                         'Position',[0.75 0.9 0.15 0.04],...
                                         'String',{'Edit here','Import from WS'},...
                                         'Callback',@INLSelectionMethod_callback);
                                     
    hTextINLFromWorkspace = uicontrol('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.6 0.8 0.15 0.04],...
                                     'String','INL from workspace: ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);                                 
    hEditINLFromWorkspace = uicontrol ('Style','edit',...
                                       'Units','normalized',...
                                       'Position',[0.75 0.8 0.15 0.04],...
                                       'HorizontalAlignment','right',...
                                       'Enable','off',...
                                       'Callback',@EditINLFromWorkspace_callback);
                                                                  
    hTextINLShapeSelector = uicontrol('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.6 0.7 0.15 0.04],...
                                     'String','Shape of INL: ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);    
    hPopupMenuINLShapeSelector = uicontrol('Style','popup',...
                                          'Units','normalized',...
                                          'Position',[0.75 0.7 0.15 0.04],...
                                          'String',{'None','Hann window','Sine wave'},...
                                          'Callback',@INLShapeSelector_callback);
                                      
    hTextINLShapeCoefficient = uicontrol('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.6 0.6 0.2 0.04],...
                                     'String','Magnitude of INL shape (in LSB): ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);    
    hEditINLShapeCoefficient = uicontrol ('Style','edit',...
                                     'Units','normalized',...
                                     'Position',[0.8 0.6 0.1 0.04],...
                                     'HorizontalAlignment','right',...
                                     'Callback',@EditINLShapeCoefficient_callback);
                                        
    hTextNoiseOnINLSelector = uicontrol ('Style','text',...
                                         'Units','normalized',...
                                         'Position',[0.6 0.5 0.15 0.04],...
                                         'String','Type of noise on INL shape: ',...
                                         'HorizontalAlignment','left',...
                                         'BackgroundColor',[0.8 0.8 0.8]);    
    hPopupMenuNoiseOnINLSelector = uicontrol('Style','popup',...
                                          'Units','normalized',...
                                          'Position',[0.75 0.5 0.15 0.04],...
                                          'String',{'None','Normal distribution','Uniform distribution'},...
                                          'Callback',@NoiseOnINLSelector_callback);
                                 
    hTextNoiseOnINLCoefficient = uicontrol('Style','text',...
                                     'Units','normalized',...
                                     'Position',[0.6 0.4 0.2 0.04],...
                                     'String','Deviation of noise on INL (in LSB): ',...
                                     'HorizontalAlignment','left',...
                                     'BackgroundColor',[0.8 0.8 0.8]);
                                 
    hEditNoiseOnINLCoefficient = uicontrol ('Style','edit',...
                                     'Units','normalized',...
                                     'Position',[0.8 0.4 0.1 0.04],...
                                     'HorizontalAlignment','right',...
                                     'Callback',@EditNoiseOnINLCoefficient_callback);                                 

    hPushButtonSimulateMeasurement = uicontrol ('Style','pushbutton',...
                                     'Units','normalized',...
                                     'Position',[0.25 0.05 0.2 0.1],...
                                     'String','Simulate measurement',...
                                     'Callback',@SimulateMeasurement_callback);

    hPushButtonCancel = uicontrol ('Style','pushbutton',...
                                     'Units','normalized',...
                                     'Position',[0.55 0.05 0.2 0.1],...
                                     'String','Cancel',...
                                     'Callback',@Cancel_callback);
                                 
%Defining HELP menu
hMenuSimulationHelp = uimenu(simulate_measurement_window,'Label','Simulation Help');
uimenu(hMenuSimulationHelp,'Label','How to simulate measurement','Callback',@HelpHowToSimulate_callback);

    function HelpHowToSimulate_callback(source,eventdata)
        helpdlg({'To perform simulations please note the followings:';...
                 'Number of samples specifies the length of measurement record.';...
                 'Number of periods specifies the frequency of the excitation signal.';...
                 '(Naturally number of periods can be a fractional number.)';...
                 'The amplitude and phase can be described using the cosine and sine components of the sine wave,';...
                 'and also can be described with te initial phase (in degrees), and the amplitude of the sine wave.';...
                 'Note that the Full Scale of the converter is normalized to 1, and amplitude is half of the';...
                 'of the peak-to-peak amplitude of the sine wave';...
                 'DC component can be between 0 and 1, where 0 is the lowest and 1 is the highest transition level of the ADC.'
                 'For example a sine wave with DC component 0.5 and amplitude 0.5 fully drives the ADC under test.';...
                 'Std of noise is the standerter aard deviation of noise oin the excitation signal';...
                 'This can be given relative to the full scale, e.g. 0.6/4096,';...
                 'in case of a 12-bit converter and 0.6 LSB noise'},...
                 'How to simulate measurement');
    end


                                 
%Local variables, state variables
cosine_sine = true;
amplitude = NaN;
phase_deg = NaN;
shape_type = 1;
shape_coeff = 0;
noise_type = 1;
noise_std = 0;
INL_from_workspace = false;
INL_variable_name = '';

%return variables
success = false;
datavect = NaN;
parameters.A = NaN;
parameters.B = NaN;
parameters.C = NaN;
parameters.theta = NaN;
parameters.sigma = NaN;
parameters.NoB = NoB; %Number of bits
parameters.NoS = NaN; %Number of samples
parameters.NoP = NaN; %Number of periods
parameters.INL = NaN;
    
uiwait(simulate_measurement_window); %Blocks return until either Cancel or 'Simulate measurement' pushbuttons are pressed.
        
    function EditNumberOfBits_callback(source,eventdata)
        if ~isempty((get(source,'String')))
            parameters.NoB = evalin('base',get(source,'String'));
        end
    end
    
    function EditNumberOfSamples_callback(source,eventdata)
        if ~isempty((get(source,'String')))
            parameters.NoS = evalin('base',get(source,'String'));
        end
    end

    function EditNumberOfPeriods_callback(source,eventdata)
        if ~isempty((get(source,'String')))
            parameters.NoP = evalin('base',get(source,'String'));
        end
    end

    function AmpPhaseVsCosineSineSelector_callback(source,eventdata)
        if (get(source,'Value') ~= 1)
            cosine_sine = false;
            UpdateDisplay;
        else
            cosine_sine = true;
            UpdateDisplay;
        end
    end

    function EditCosineCoefficient_callback(source,eventdata)
        if (cosine_sine)
            if ~isempty((get(source,'String')))
                parameters.A = evalin('base',get(source,'String'));
            end
            SynchronizeAmpPhase;
        else
            if ~isempty((get(source,'String')))                
                amplitude = evalin('base',get(source,'String'));
            end
            SynchronizeAB;
        end            
    end

    function EditSineCoefficient_callback(source,eventdata)
        if (cosine_sine)
            if ~isempty((get(source,'String')))
                parameters.B = evalin('base',get(source,'String'));
            end
            SynchronizeAmpPhase;
        else
            if ~isempty((get(source,'String')))
                phase_deg = evalin('base',get(source,'String'));
            end
            SynchronizeAB;
        end            
    end

    function EditDCComponent_callback(source,eventdata)
        if ~isempty((get(source,'String')))
            parameters.C = evalin('base',get(source,'String'));
        end
    end

    function EditStdOfNoise_callback(source,eventdata)
        if ~isempty((get(source,'String')))
            parameters.sigma = evalin('base',get(source,'String'));
        end
    end

    function INLShapeSelector_callback(source,eventdata)
       shape_type = get(source,'Value'); %1-None; 2-Hann; 3-Sine;
    end

    function EditINLShapeCoefficient_callback(source,eventdata)
        if ~isempty((get(source,'String')))
            shape_coeff = evalin('base',get(source,'String'));
        end
    end

    function NoiseOnINLSelector_callback(source,eventdata)
            noise_type = get(source,'Value'); % 1-None; 2-Normal; 3-Uniform;
    end

    function EditNoiseOnINLCoefficient_callback(source,eventdata)
        if ~isempty((get(source,'String')))
            noise_std =  evalin('base',get(source,'String'));
        end
    end

    function INLSelectionMethod_callback(source,eventdata)
        if (get(source,'Value') == 1) %Edit here
            INL_from_workspace = false;            
            UpdateDisplay;
        else 
            INL_from_workspace = true;
            UpdateDisplay;
        end
    end

    function EditINLFromWorkspace_callback(source,eventdata)
        INL_variable_name = get(source,'String');
    end

    function SimulateMeasurement_callback(source,eventdata)
        %Setting angular frequency of simulation
        parameters.theta = 2*pi*parameters.NoP/parameters.NoS;
        %Assembling INL
        if (INL_from_workspace) 
            parameters.INL = evalin('base',INL_variable_name);
        else
            if (shape_type == 1) %None
                parameters.INL = zeros(1,2^parameters.NoB - 1);
            elseif (shape_type == 2) %Hann window
                parameters.INL = shape_coeff*hann(2^parameters.NoB - 1).';
            elseif (shape_type == 3) %Sine wave
                parameters.INL = shape_coeff*sin(linspace(0,2*pi,2^parameters.NoB - 1));
            end

            if (noise_type == 1) %None
            elseif (noise_type == 2) %Normal distribution
                parameters.INL(2:end-1) = parameters.INL(2:end-1) + noise_std*randn(1,2^parameters.NoB - 3);
            elseif (noise_type == 3) %Uniform distribution
                parameters.INL(2:end-1) = parameters.INL(2:end-1) + noise_std*sqrt(12)*rand(1,2^parameters.NoB - 3) - noise_std*sqrt(12)/2;
            end
        end
        %Calculating the quantized sine wave
        transition_levels = INL2TransLevels(parameters.INL);
        pure_sine_wave = parameters.A*cos((1:parameters.NoS).'*2*pi*parameters.NoP/parameters.NoS) + parameters.B*sin((1:parameters.NoS).'*2*pi*parameters.NoP/parameters.NoS) + parameters.C;
        noisy_sine_wave = pure_sine_wave + parameters.sigma*randn(parameters.NoS,1);
        datavect = QuantizeSignal(noisy_sine_wave,transition_levels); %Code offset: 0 -> 0..2^NoB - 1
        success = true;
        close(simulate_measurement_window);
    end

    function Cancel_callback(source,eventdata)
        success = false;
        close(simulate_measurement_window);
    end

    function UpdateDisplay
        if (cosine_sine)
            set(hTextCosineCoefficient,'String','Cosine coefficient (A): ');
            set(hEditCosineCoefficient,'String',sprintf('%1.4f',parameters.A));
            set(hTextSineCoefficient,'String','Sine coefficient (B): ');
            set(hEditSineCoefficient,'String',sprintf('%1.4f',parameters.B));            
        else
            set(hTextCosineCoefficient,'String','Amplitude: ');
            set(hEditCosineCoefficient,'String',sprintf('%1.4f',amplitude));
            set(hTextSineCoefficient,'String','Phase [DEG]: ');
            set(hEditSineCoefficient,'String',sprintf('%3.2f',phase_deg));
        end
        if (INL_from_workspace)
            set(hPopupMenuINLShapeSelector,'Enable','off');
            set(hEditINLShapeCoefficient,'Enable','off');
            set(hPopupMenuNoiseOnINLSelector,'Enable','off');
            set(hEditNoiseOnINLCoefficient,'Enable','off');
            set(hEditINLFromWorkspace,'Enable','on');
        else
            set(hPopupMenuINLShapeSelector,'Enable','on');
            set(hEditINLShapeCoefficient,'Enable','on');
            set(hPopupMenuNoiseOnINLSelector,'Enable','on');
            set(hEditNoiseOnINLCoefficient,'Enable','on');                        
            set(hEditINLFromWorkspace,'Enable','off');
        end
    end

    function SynchronizeAB
        parameters.A = amplitude*cos(phase_deg/180*pi);
        parameters.B = (-1)*amplitude*sin(phase_deg/180*pi);        
    end

    function SynchronizeAmpPhase
        amplitude = sqrt(parameters.A^2 + parameters.B^2);
        phase_deg = (-1)*atan2(parameters.B,parameters.A)*180/pi;
    end
    end
